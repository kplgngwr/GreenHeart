// src/components/ReportModal.jsx
import React, { useState, useEffect } from 'react';
import { Dialog } from '@headlessui/react';
import axios from 'axios';

export default function ReportModal({ isOpen, onClose, previousCrop }) {
  const [loading, setLoading] = useState(false);
  const [report, setReport] = useState(null);
  const [error, setError] = useState(null);
  useEffect(() => {
    if (!isOpen) return;

    async function fetchReport() {
      setLoading(true);
      setError(null);
      setReport(null);

      const payload = {
        nitrogen: 50,
        phosphorus: 30,
        potassium: 40,
        temperature: 25.0,
        soil_fertility: 'high',
        moisture: 35.0,
        season: 'summer',
        ndvi: 0.68,
        evi: 0.45,
        soil_ph: 6.5,
        rainfall_last_30_days: 120,
        groundwater_depth: 15.0,
        slope_degree: 5,
        market_price_per_quintal: 3500,
        crop_history: {
          previous_crop: previousCrop,
          yield_previous_season: 3.5,
        },
        region: 'Punjab',
        district: 'Mohali',
        irrigation_type: 'canal',
        expected_harvest_days: 110,
      };

      try {
        // For demo purposes, we'll simulate a response if the API is not available
        let reportData;
        
        try {
          const response = await axios.post(
            'https://three-things-strive.loca.lt/api/v1/recommend-crops',
            payload
          );
          reportData = response.data;
        } catch (apiError) {
          console.log("API error, using demo data:", apiError);
          // Fallback to demo data if API is not available
          reportData = {
            analysis: "üåø Personalized Crop Advisory (Generated by GreenHeart AI): Based on soil analysis and environmental conditions in your Mohali, Punjab farm, we have identified optimal crop choices. Your soil has good nitrogen (50 mg/kg) and phosphorus (30 mg/kg) levels, with a slightly acidic pH of 6.5 which is favorable for many crops.",
            recommended_crops: [
              {
                name: "Wheat",
                suitability: 92,
                expected_yield: 4.8,
                reasons: "Compatible with previous rice cultivation, favorable soil nutrients"
              },
              {
                name: "Maize",
                suitability: 85,
                expected_yield: 5.2,
                reasons: "Good market potential, suitable temperature range"
              },
              {
                name: "Potatoes",
                suitability: 79,
                expected_yield: 20.5,
                reasons: "High yield potential in your soil conditions"
              },
              {
                name: "Sunflower",
                suitability: 75,
                expected_yield: 1.8,
                reasons: "Drought resistant, suitable for current moisture levels"
              }
            ],
            soil_health: {
              overall_rating: "Good",
              improvement_needed: "Minor phosphorus enhancement",
              fertility_status: "Above average",
              organic_matter: "Medium (1.8%)"
            },
            market_potential: {
              highest_demand: "Wheat and Potatoes",
              price_trend: "Stable with seasonal variations",
              storage_options: "Good for wheat, limited for vegetables",
              transport_infrastructure: "Well connected to major markets"
            }
          };
        }
        
        setReport(reportData);
        console.log("Report", reportData);
      } catch (err) {
        setError(err.message || 'Failed to fetch report');
      } finally {
        setLoading(false);
      }
    }

    fetchReport();
  }, [isOpen, previousCrop]);
  // Format the report data for better display
  const renderReportContent = () => {
    if (!report) return null;
    
    // Extract key information
    const { analysis, recommended_crops, soil_health, market_potential } = report;
    
    return (
      <div className="space-y-4 max-h-[60vh] overflow-y-auto pr-2">
        {/* Analysis Section */}
        {analysis && (
          <div className="bg-green-50 p-4 rounded-lg border-l-4 border-green-500">
            <h3 className="text-lg font-semibold text-green-800 flex items-center">
              <span className="mr-2">üå±</span> Analysis
            </h3>
            <p className="text-gray-700 mt-2">{analysis}</p>
          </div>
        )}
        
        {/* Recommended Crops Section */}
        {recommended_crops && recommended_crops.length > 0 && (
          <div className="bg-blue-50 p-4 rounded-lg border-l-4 border-blue-500">
            <h3 className="text-lg font-semibold text-blue-800 flex items-center">
              <span className="mr-2">üåæ</span> Recommended Crops
            </h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-3 mt-2">
              {recommended_crops.map((crop, index) => (
                <div key={index} className="bg-white p-3 rounded-md shadow-sm border border-blue-100">
                  <div className="font-medium text-blue-700">{crop.name || "Unknown Crop"}</div>
                  {crop.suitability && (
                    <div className="text-sm mt-1">
                      <span className="text-gray-600">Suitability:</span> 
                      <span className="ml-1 font-semibold text-blue-600">{crop.suitability}%</span>
                    </div>
                  )}
                  {crop.expected_yield && (
                    <div className="text-sm mt-1">
                      <span className="text-gray-600">Expected yield:</span> 
                      <span className="ml-1 font-semibold text-green-600">{crop.expected_yield} quintal/acre</span>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* Soil Health Section */}
        {soil_health && (
          <div className="bg-amber-50 p-4 rounded-lg border-l-4 border-amber-500">
            <h3 className="text-lg font-semibold text-amber-800 flex items-center">
              <span className="mr-2">üåç</span> Soil Health
            </h3>
            <div className="grid grid-cols-2 gap-2 mt-2">
              {Object.entries(soil_health).map(([key, value]) => (
                <div key={key} className="bg-white p-2 rounded-md shadow-sm border border-amber-100">
                  <div className="text-sm text-gray-600">{key.replace(/_/g, " ")}</div>
                  <div className="font-medium text-amber-700">{value}</div>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* Market Potential Section */}
        {market_potential && (
          <div className="bg-purple-50 p-4 rounded-lg border-l-4 border-purple-500">
            <h3 className="text-lg font-semibold text-purple-800 flex items-center">
              <span className="mr-2">üìä</span> Market Potential
            </h3>
            <div className="grid grid-cols-1 gap-2 mt-2">
              {Object.entries(market_potential).map(([key, value]) => (
                <div key={key} className="bg-white p-2 rounded-md shadow-sm border border-purple-100 flex justify-between">
                  <span className="text-gray-700">{key.replace(/_/g, " ")}</span>
                  <span className="font-medium text-purple-700">{value}</span>
                </div>
              ))}
            </div>
          </div>
        )}
        
        {/* Raw Data Section (Hidden by Default) */}
        <details className="bg-gray-50 rounded-lg">
          <summary className="cursor-pointer p-3 font-medium text-gray-700">View Raw Data</summary>
          <pre className="bg-gray-100 p-4 rounded-b text-sm overflow-x-auto text-gray-700 max-h-[200px] overflow-y-auto">
            {JSON.stringify(report, null, 2)}
          </pre>
        </details>
      </div>
    );
  };

  return (
    <Dialog
      open={isOpen}
      onClose={onClose}
      className="fixed inset-0 z-50 overflow-y-auto"
    >
      <div className="flex items-center justify-center min-h-screen px-4 py-6">
        <div className="fixed inset-0 bg-black/30" aria-hidden="true" onClick={onClose} />
        <Dialog.Panel className="bg-white rounded-xl max-w-xl w-full p-6 shadow-xl relative">
          <Dialog.Title className="text-2xl font-bold mb-4 text-green-700 border-b pb-3">
            <div className="flex items-center">
              <span className="text-green-500 text-3xl mr-2">üåø</span>
              Crop Recommendation Report
            </div>
          </Dialog.Title>

          {loading && (
            <div className="py-8 text-center">
              <svg className="animate-spin h-10 w-10 text-green-500 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <p className="mt-3 text-gray-600">Analyzing soil and environmental data...</p>
            </div>
          )}
          
          {error && (
            <div className="bg-red-50 p-4 rounded-lg border-l-4 border-red-500 text-red-700">
              <div className="font-semibold">Error generating report</div>
              <p className="mt-1">{error}</p>
            </div>
          )}

          {report && renderReportContent()}

          <div className="mt-6 flex justify-end gap-3 border-t pt-3">
            <button
              onClick={onClose}
              className="px-5 py-2 bg-gradient-to-r from-green-600 to-green-500 text-white rounded-full text-sm font-medium hover:from-green-700 hover:to-green-600 transition-all duration-300 flex items-center"
            >
              Close
            </button>
          </div>
        </Dialog.Panel>
      </div>
    </Dialog>
  );
}
